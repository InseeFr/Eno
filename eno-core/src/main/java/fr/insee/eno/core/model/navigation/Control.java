package fr.insee.eno.core.model.navigation;

import fr.insee.ddi.lifecycle33.datacollection.ComputationItemType;
import fr.insee.eno.core.annotations.Contexts.Context;
import fr.insee.eno.core.annotations.DDI;
import fr.insee.eno.core.annotations.Lunatic;
import fr.insee.eno.core.exceptions.business.IllegalDDIElementException;
import fr.insee.eno.core.exceptions.technical.MappingException;
import fr.insee.eno.core.model.EnoIdentifiableObject;
import fr.insee.eno.core.model.EnoObjectWithExpression;
import fr.insee.eno.core.model.calculated.CalculatedExpression;
import fr.insee.eno.core.model.label.DynamicLabel;
import fr.insee.eno.core.parameter.Format;
import fr.insee.eno.core.utils.DDIUtils;
import fr.insee.lunatic.model.flat.ControlContextType;
import fr.insee.lunatic.model.flat.ControlCriticalityEnum;
import fr.insee.lunatic.model.flat.ControlType;
import fr.insee.lunatic.model.flat.ControlTypeEnum;
import lombok.Getter;
import lombok.Setter;

/** Consistency check. */
@Getter
@Setter
@Context(format = Format.DDI, type = ComputationItemType.class)
@Context(format = Format.LUNATIC, type = ControlType.class)
public class Control extends EnoIdentifiableObject implements EnoObjectWithExpression {

    public enum Criticality {INFO, WARN, ERROR}

    public enum TypeOfControl { CONSISTENCY, FORMAT }

    public enum Context {SIMPLE, ROW}

    public static Criticality convertDDICriticality(String ddiTypeOfComputationItem) {
        return switch (ddiTypeOfComputationItem) {
            case "informational", "line-informational" -> Criticality.INFO;
            case "warning", "line-warning" -> Criticality.WARN;
            case "stumblingblock", "line-stumblingblock", "roundabout-locked" -> Criticality.ERROR;
            default -> throw new MappingException(String.format(
                    "Unknown DDI criticality '%s'", ddiTypeOfComputationItem));
        };
    }

    public static ControlCriticalityEnum convertCriticalityToLunatic(Criticality criticality) {
        return switch (criticality) {
            case INFO -> ControlCriticalityEnum.INFO;
            case WARN, ERROR -> ControlCriticalityEnum.WARN;
            // TODO: temporary error -> warn in Lunatic for non blocking controls (to be set back at error later on)
        };
    }

    public static ControlTypeEnum convertTypeOfControlToLunatic(TypeOfControl typeOfControl) {
        return switch (typeOfControl) {
            case FORMAT -> ControlTypeEnum.FORMAT;
            case CONSISTENCY -> ControlTypeEnum.CONSISTENCY;
        };
    }

    /** With the current modeling, controls that are described in the DDI are always of type 'consistency'.
     * In DDI, computation item only describe controls that are defined by the questionnaire's designer.
     * ("Format" controls are generated by Eno using questions' metadata.) */
    public static TypeOfControl mapTypeFromDDI() {
        return TypeOfControl.CONSISTENCY;
    }

    public static ControlContextType convertContextToLunatic(Context context) {
        return switch (context) {
            case SIMPLE -> ControlContextType.SIMPLE;
            case ROW -> ControlContextType.ROW;
        };
    }

    /** In DDI, there is only one concept for the type of controls.
     * The computation item type has a 'type of computation item' property.
     * The value of this property determines the control's context. */
    public static Context mapContextFromDDI(ComputationItemType computationItemType) {
        String ddiTypeOfComputationItem = computationItemType.getTypeOfComputationItem().getStringValue();
        //
        if (ddiTypeOfComputationItem == null)
            throw new IllegalDDIElementException(
                    "DDI type of control is not defined in " + DDIUtils.ddiToString(computationItemType) + ".");
        //
        if (ddiTypeOfComputationItem.startsWith("line"))
            return Context.ROW;
        return Context.SIMPLE;
    }

    /** Control criticality. */
    @DDI("T(fr.insee.eno.core.model.navigation.Control).convertDDICriticality(" +
            "getTypeOfComputationItem().getStringValue())")
    @Lunatic("setCriticality(T(fr.insee.eno.core.model.navigation.Control).convertCriticalityToLunatic(#param))")
    private Criticality criticality;

    @DDI("T(fr.insee.eno.core.model.navigation.Control).mapTypeFromDDI()")
    @Lunatic("setTypeOfControl(T(fr.insee.eno.core.model.navigation.Control).convertTypeOfControlToLunatic(#param))")
    private TypeOfControl typeOfControl;

    @DDI("T(fr.insee.eno.core.model.navigation.Control).mapContextFromDDI(#this)")
    @Lunatic("setType(T(fr.insee.eno.core.model.navigation.Control).convertContextToLunatic(#param))")
    private Context context;

    /** Label typed in Pogues, unused in Lunatic. */
    @DDI("getDescription()?.getContentArray(0)?.getStringValue()") // NOTE: getConstructNameArray(0).getStringArray(0).getStringValue() has the same information
    private String label;

    /** Expression that determines if the control is triggered or not. */
    @DDI("getCommandCode().getCommandArray(0)")
    @Lunatic("setControl(#param)")
    private CalculatedExpression expression;

    /** Message displayed if the control is triggered. */
    @DDI("!#this.getInterviewerInstructionReferenceList().isEmpty() ? " +
            "#index.get(#this.getInterviewerInstructionReferenceArray(0).getIDArray(0).getStringValue())" +
            ".getInstructionTextArray(0) : " +
            "null")
    @Lunatic("setErrorMessage(#param)")
    private DynamicLabel message;

}
