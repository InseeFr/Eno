name: Build snapshot

on:
  pull_request:
    types: [labeled]
    paths-ignore:
      - 'logo/**'
      - 'docs/**'
      - 'CHANGELOG.md'
      - 'README**.md'
      - 'Dockerfile'

# TL;DR: Don't touch the version number, 
# put the 'deploy-snapshot' label on a GitHub PR,
# an image will be published on Docker Hub.

# This workflow is triggered when the 'deploy-snapshot' label is put on a PR.
# It checks that the number version has not been changed (in comparison to the main branch).
# The application is build, and a tag is published on Docker Hub. 
# The tag of this image is the current version, suffixed with current commit hash (short), 
# like X.Y.Z-abcd1234

# If the workflow fails because of the version number, 
# make sure that your branch is up-to-date with the main branch.
# If you have manually changed the version number, change it back.

env:
  JAVA_VERSION: '21'

jobs:

  check-version:
    if: ${{ contains(github.event.pull_request.labels.*.name, 'deploy-snapshot') }}
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.create-tag.outputs.value }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        # https://github.com/gradle/actions/blob/main/setup-gradle/README.md

      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: Get main branch version
        id: main-version
        run: |
          ./gradlew # (load the gradle wrapper, required for the get version step)
          echo "version=$(./gradlew printVersion --console=plain -q)" >> $GITHUB_OUTPUT

      - name: Checkout pull request HEAD
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }} # Note: in the GitHub action, the default value is the merge commit

      - name: Get PR branch version
        id: branch-version
        run: |
          echo "version=$(./gradlew printVersion --console=plain -q)" >> $GITHUB_OUTPUT

      - name: Check version
        run: |
          echo "Main branch version:    ${{ steps.main-version.outputs.version }}"
          echo "Current branch version: ${{ steps.branch-version.outputs.version }}"

          if [[ "${{ steps.main-version.outputs.exists }}" != "true" ]]; then
            echo "Current version does not match the main branch version."
            ehco "Update your code to align with the '${{ github.event.repository.default_branch }}' branch."
            exit 1
          fi

          echo "OK ðŸ‘Œ"

      - name: Create image tag
        id: create-tag
        run: |
          REVISION=$(eval "git rev-parse --short HEAD")
          echo "value=${{ steps.branch-version.outputs.version }}-$REVISION" >> $GITHUB_OUTPUT

  publish-docker:
    needs: check-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Image tag is ${{ needs.check-version.outputs.image-tag }}
        run: echo "${{ needs.check-version.outputs.image-tag }}"

#      - name: Set up JDK
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: ${{ env.JAVA_VERSION }}
#
#      - name: Setup Gradle
#        uses: gradle/actions/setup-gradle@v3
#
#      - name: Build Eno modules
#        run: ./gradlew build
#
#      - name: Publish to Docker Hub
#        uses: elgohr/Publish-Docker-Github-Action@v5
#        with:
#          name: inseefr/eno-ws
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#          default_branch: ${{ github.ref }}
#          tags: ${{ needs.check-version.outputs.image-tag }}

  write-comment:
    needs: [ check-version, publish-docker ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ‘‹ Image ${{ needs.check-version.outputs.image-tag }} deployed on docker hub'
            })

  remove-deploy-label:
    needs: write-comment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: deploy-snapshot
