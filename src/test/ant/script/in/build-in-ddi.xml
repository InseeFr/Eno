<project basedir="." name="EnoDDI">
    <!-- ********************************************** ddiPreprocessing ************************************************ -->
    <!-- This target will call 1+3 sub targets : mapping ; dereferencing / cleaning / titling -->
    <!-- It expects an 'input-file' param for the beginning file uri of the pipeline.  -->
    <target name="ddiPreprocessing">
        
        <!-- md2whtml : modifying the DDI file to transform markdown formatting -->
        <!-- Only for formats that need it (target is all except lunatic, right now we keep doing it for all) --> 
        <!-- <if>
            <not>
                <equals arg1="${Properties.OutFormat}" arg2="lunatic-xml"/>
            </not>
            <then> -->
                <antcall target="md2xhtml">
                    <param name="input-file" value="${preprocessing-input-file}"/>
                </antcall>
        <!--</then>
             <else>
                <antcall target="md2md">
                    <param name="input-file" value="${preprocessing-input-file}"/>
                </antcall>
            </else>
        </if> -->
        
        <!-- Mapping : the input DDI files (ccs, qb...) -->
        <!-- Creates a mapping.tmp file in the temp folder-->
        <if>
            <and>
                <equals arg1="${Properties.OutFormat}" arg2="xforms"/>
                <not>
                    <equals arg1="${ENOParameters.Parameters.Context}" arg2="default"/>
                </not>
            </and>
            <then>
                <antcall target="mapping">
                    <param name="input-file" value="${preprocessing-input-file}"/>
                </antcall>
            </then>
        </if>
        <!-- Dereferencing : the input DDI files (ccs, qb...) -->
        <!-- Creates multiple files with a -dereferenced suffix in the temp folder-->
        <antcall target="dereferencing">
            <param name="input-file" value="${temp.home}/${survey-name}/${Properties.InFormat}/final-md.tmp"/>
        </antcall>
        <!-- For each created file (one by model), we clean. -->
        <!-- Creating a -cleaned suffixed file -->
        <foreach target="cleaning" param="file" inheritall="true">
            <path>
                <fileset dir="${temp.home}/${survey-name}/${Properties.InFormat}" excludes="*-md.tmp, *-dereferenced.tmp, null.tmp"/>
            </path>
        </foreach>
        <!-- Then adding titles to the created file below -->
        <!-- Creating a -final suffixed file -->
        <if>
            <not>
                <equals arg1="${Properties.OutFormat}" arg2="xml-pogues"/>
            </not>
            <then>
                <foreach target="titling" param="file" inheritall="true">
                    <path>
                        <fileset dir="${temp.home}/${survey-name}/${Properties.InFormat}" includes="*-cleaned.tmp"/>
                    </path>
                </foreach>                
            </then>
        </if>
    </target>
    
    
    <!-- Markdown to xhtml -->
    <target name="md2xhtml">		
        <xslt in="${input-file}"
            out="${temp.home}/${survey-name}/${Properties.InFormat}/first-md.tmp"
            style="${xslt.home}/pre-processing/ddi/md2xhtml.xsl" classpath="${saxon.jar}" force="true">
        </xslt>
        
        <xslt in="${temp.home}/${survey-name}/${Properties.InFormat}/first-md.tmp"
            out="${temp.home}/${survey-name}/${Properties.InFormat}/final-md.tmp"
            style="${xslt.home}/pre-processing/ddi/tweak-xhtml-for-ddi.xsl" force="true" classpath="${saxon.jar}">
        </xslt>
    </target>
    
    <!-- Markdown to markdown (just copying to keep coherent naming for later input) -->
    <target name="md2md">
        <copy file="${input-file}"
            tofile="${temp.home}/${survey-name}/${Properties.InFormat}/final-md.tmp"/>
    </target>
    
    <!-- Dereferencing -->
    <target name="dereferencing">
        
        <!-- Creates a dereferenced DDI for each model with the already dereferenced files and adding some variables from the VariableScheme to the upcoming result -->
        <xslt in="${input-file}"
            out="${temp.home}/${survey-name}/${Properties.InFormat}/null.tmp"
            style="${xslt.home}/pre-processing/ddi/dereferencing.xsl" classpath="${saxon.jar}" force="true">
            <param name="output-folder" expression="${temp-folder}/${survey-name}/${Properties.InFormat}"/>
        </xslt>
        
    </target>
    
    <!-- Cleaning -->
    <!-- Creates a -cleaned suffixed file after applying the cleaning.xsl stylesheet to the input file -->
    <target name="cleaning" description="Cleaning DDI">
        <basename file="${file}" property="file-name" suffix=".tmp"/>
        <xslt in="${temp.home}/${survey-name}/${Properties.InFormat}/${file-name}.tmp"
            out="${temp.home}/${survey-name}/${Properties.InFormat}/${file-name}-cleaned.tmp"
            style="${xslt.home}/pre-processing/ddi/cleaning.xsl" classpath="${saxon.jar}" force="true">
            <param name="properties-file" expression="${config-folder}/${Properties.InFormat}2${Properties.OutFormat}.xml"/>
        </xslt>
    </target>
    
    <!-- Titling -->
    <!-- Creates a -final suffixed file after applying the titling.xsl stylesheet to the input file -->
    <target name="titling" description="Adding titles">
        <basename file="${file}" property="file-name" suffix=".tmp"/>
        <propertyregex property="output-name" input="${file-name}" regexp="-cleaned" replace="" global="true"/>
        <xslt in="${temp.home}/${survey-name}/${Properties.InFormat}/${file-name}.tmp"
            out="${temp.home}/${survey-name}/${Properties.InFormat}/${output-name}-final.tmp"
            style="${xslt.home}/pre-processing/ddi/titling.xsl" classpath="${saxon.jar}" force="true">
            <param name="parameters-file" expression="${questionnaires-folder}/${survey-name}/parameters.xml"/>
        </xslt>
    </target>
    
    <!-- Mapping -->
    <!-- Creates a link between DDI internal IDs and business variable -->
    <target name="mapping">
        <xslt in="${input-file}" out="${temp.home}/${survey-name}/mapping.xml"
            style="${xslt.home}/pre-processing/DDI/mapping.xsl" classpath="${saxon.jar}" force="true">
            <param name="parameters-file" expression="${questionnaires-folder}/${survey-name}/parameters.xml"/>
        </xslt> 
    </target>

</project>
