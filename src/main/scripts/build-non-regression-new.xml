<?xml version="1.0" encoding="UTF-8"?>
<project name="enoNonRegression" basedir="." default="full-light">
    <!-- Importing the configuration part that is common to every script -->
    <import file="build-configuration.xml"/>

    <!-- Properties for this non regression script -->
    <property name="survey-name" value="TESTERICCH"/>
    <property name="survey-folder" value="${root-folder}/questionnaires/${survey-name}"/>
    
    <!--************************** This value is to be set to "fr" to generate a xform *******************************************-->
    <!--***** other value aceptables:-"plop" to see the 'track' of the drivers and getters (resut at:Eno\target\temp\plop\v1)*****-->    
    
    <property name="Param" value="pogues-xml2ddi"/>
    
    
    <!--to implement new value of this parameter, you have to make duplicate of every folders or files in the eno folder that 
    contains "plop" in their name. you have to then replace plop by your new parameter, edit the following if block and edit 
    the 12th line of the ddi2???-fixed found at Eno\src\main\xslt\transformations\ddi2???-->
    
    <!--**************************************************************************************************************************-->

    <if>
        <equals arg1="${Param}" arg2="pogues-xml2ddi"/>
        <then>
            <property name="out-format" value="ddi"/>  
            <property name="out-extension" value="xml"/>
            <property name="in-format" value="pogues-xml"/>
        </then>
        <else>
            <property name="out-format" value="fr"/>
            <property name="out-extension" value="xhtml"/>
            <property name="in-format" value="ddi"/>
        </else>
    </if>

    <!--************************MAIN TARGETS*****************************-->

    <!-- The first main target that can be called -->
    <!-- Cleaning, preprocessing the DDI and preprocessing the generator -->
    <!-- Targets are called in the strict order of the 'depends' attribute : clean first, then DDIPreprocessing and finally ENOPreprocessing-->
        <target name="full" depends="clean, InPreprocessing, ENOPreprocessing">
            <echo message="Go !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" />
        <!-- For each dereferenced file created in temp, creating the corresponding out-format -->
        <foreach target="in2out" param="file" inheritall="true">
            <path>
                <fileset dir="${temp.home}" includes="*-final.tmp"/>
            </path>
        </foreach>
            <!--TODO : add dereferencing and titling-->
    </target>

    <target name="full-light" depends="clean, InPreprocessing">
        <echo message="Go !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" />
        <!-- For each dereferenced file created in temp, creating the corresponding out-format -->
        <foreach target="in2out" param="file" inheritall="true">
            <path>
                <fileset dir="${temp.home}" includes="*-final.tmp"/>
            </path>
        </foreach>
    </target>


    <!--************************TARGETS TO GENERATE A SURVEY *****************************-->

    <target name="in2out">
        <echo message="YO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" />
        <!-- From the -final suffixed file, this target will create an orbeon readable questionnaire -->
        <basename file="${file}" property="file-name" suffix=".tmp"/>
        <propertyregex property="form-name" input="${file-name}" regexp="-final" replace=""
            global="true"/>

        <!-- Generating out-format from the in-format : basic-form.tmp using the in2out.xsl stylesheet -->
        <xslt in="${temp.home}/${file-name}.tmp"
            out="${temp.home}/${out-format}/${form-name}/basic-form.tmp"
            style="${xslt.home}/transformations/${in-format}2${out-format}/${in-format}2${out-format}.xsl" force="true"
            classpath="${saxon.jar}">
            <param name="properties-file" expression="${root-folder}/config/${in-format}2${out-format}.xml"/>
            <param name="parameters-file" expression="${survey-folder}/parameters.xml"/>
            <param name="labels-folder" expression="${lang-folder}/fr"/>
        </xslt>

        <!-- Adding the layer in charge of the survey's navigation by applying browsing.xsl stylesheet -->
        <!-- The final out-format file will be called form.out-extension -->
        <if>
            <equals arg1="${out-format}" arg2="fr"/>
            <then>
                <xslt in="${temp.home}/${out-format}/${form-name}/basic-form.tmp"
                    out="${root-folder}/target/${survey-name}/${form-name}/form/form.${out-extension}"
                    style="${xslt.home}/util/${out-format}/browsing.xsl" force="true" classpath="${saxon.jar}">
                    <param name="labels-folder" expression="${lang-folder}/fr"/>
                </xslt>
            </then>
            <else>
                <copy file="${temp.home}/${out-format}/${form-name}/basic-form.tmp" tofile="${root-folder}/target/${survey-name}/${form-name}/form/form.${out-extension}"/>                
            </else>
        </if>
        
        <!-- A bit of cleaning -->
        <delete file="${survey-folder}/${out-format}/${form-name}/form/basic-form.tmp"/>

    </target>

    <!--************************TARGETS : PREPROCESSING ENO*****************************-->

    <target name="ENOPreprocessing">
        <!-- Generating the xsl files from the different fods files -->
        <!-- This will generate Xsl but without dynamic creation of namespaces. -->
        <antcall target="fods2xsl">
            <param name="dir" value="${xslt.home}/transformations/${in-format}2${out-format}"/>
            <param name="name" value="drivers"/>
        </antcall>
        <antcall target="fods2xsl">
            <param name="dir" value="${xslt.home}/transformations/${in-format}2${out-format}"/>
            <param name="name" value="functions"/>
        </antcall>
        <antcall target="fods2xsl">
            <param name="dir" value="${xslt.home}/transformations/${in-format}2${out-format}"/>
            <param name="name" value="tree-navigation"/>
        </antcall>
        <antcall target="fods2xsl">
            <param name="dir" value="${xslt.home}/inputs/${in-format}/"/>
            <param name="name" value="functions"/>
        </antcall>
        <antcall target="fods2xsl">
            <param name="dir" value="${xslt.home}/inputs/${in-format}/"/>
            <param name="name" value="templates"/>
        </antcall>

        <!-- Using a sheet from the util folder in order to create a link-sheet from DDI to form-runner from the 
        generated sheet and the non-generated sheets.
        The sheets's content is directly integrated in the first one (the one that will contain the appropriate namespaces)
        -->

        <!-- Generating transformations/${in-format}2${out-format}/drivers.xsl with appropriate namespaces -->
        <xslt in="${xslt.home}/transformations/${in-format}2${out-format}/${in-format}2${out-format}-fixed.xsl" out="${temp.home}/temp.tmp"
            style="${xslt.home}/util/xsl/incorporation.xsl" force="true" classpath="${saxon.jar}">
            <param name="generated-file" expression="../../transformations/${in-format}2${out-format}/drivers.xsl"/>
        </xslt>

        <!-- Generating transformations/${in-format}2${out-format}/functions.xsl with appropriate namespaces -->
        <xslt in="${temp.home}/temp.tmp" out="${temp.home}/temp-bis.tmp"
            style="${xslt.home}/util/xsl/incorporation.xsl" force="true" classpath="${saxon.jar}">
            <param name="generated-file" expression="../../transformations/${in-format}2${out-format}/functions.xsl"/>
        </xslt>

        <!-- Generating transformations/${in-format}2${out-format}/tree-navigation.xsl with appropriate namespaces -->
        <xslt in="${temp.home}/temp-bis.tmp" out="${xslt.home}/transformations/${in-format}2${out-format}/${in-format}2${out-format}.xsl"
            style="${xslt.home}/util/xsl/incorporation.xsl" force="true" classpath="${saxon.jar}">
            <param name="generated-file"
                expression="../../transformations/${in-format}2${out-format}/tree-navigation.xsl"/>
        </xslt>

        <!-- Generating inputs/ddi/functions.xsl with appropriate namespaces -->
        <xslt in="${xslt.home}/inputs/${in-format}/source-fixed.xsl" out="${temp.home}/temp.tmp"
            style="${xslt.home}/util/xsl/incorporation.xsl" force="true" classpath="${saxon.jar}">
            <param name="generated-file" expression="../../inputs/${in-format}/functions.xsl"/>
        </xslt>

        <!-- Generating inputs/ddi/templates.xsl with appropriate namespaces -->
        <xslt in="${temp.home}/temp.tmp" out="${xslt.home}/inputs/${in-format}/source.xsl"
            style="${xslt.home}/util/xsl/incorporation.xsl" force="true" classpath="${saxon.jar}">
            <param name="generated-file" expression="../../inputs/${in-format}/templates.xsl"/>
        </xslt>
    </target>

    <!-- The target used to transform a fods into an xsl stylesheet. -->
    <target name="fods2xsl">
        <!-- Steps to transform a fods file to a xsl file -->
        <!-- From the input fods file, create a preformate.tmp (fods file) with a specific, cleaned up format -->
        <!-- This cleaned fods file will then be transformed into an xml file (xml.tmp) using fods2xml.xsl -->
        <!-- This xml file is then transformed into an xsl stylesheet using xml2xsl.xsl -->
        <!-- Preformatting a matrix using a sheet for the util folder -->
        <xslt in="${dir}/${name}.fods" out="${temp.home}/preformate.tmp"
            style="${xslt.home}/util/fods/preformatting.xsl" force="true" classpath="${saxon.jar}"/>

        <!-- From fods to xml using the generator -->
        <xslt in="${temp.home}/preformate.tmp" out="${temp.home}/xml.tmp"
            style="${xslt.home}/transformations/fods2xml.xsl" force="true" classpath="${saxon.jar}"/>

        <!-- From xml to xsl using the generator -->
        <xslt in="${temp.home}/xml.tmp" out="${dir}/${name}.xsl"
            style="${xslt.home}/transformations/xml2xsl.xsl" force="true" classpath="${saxon.jar}"/>
    </target>

    <!--************************TARGETS : PREPROCESSING DDI *****************************-->
    <target name="InPreprocessing">
        <if>
            <equals arg1="${in-format}" arg2="ddi"/>
            <then>
                <antcall target="DDIPreprocessing"/>
            </then>
            <else>
				<if>
					<equals arg1="${in-format}" arg2="pogues-xml"/>
					<then>
						<antcall target="PoguesPreprocessing"/>
					</then>
					<else>
					<copy file="${questionnaires.home}/${survey-name}/${in-format}/${survey-name}.xml" tofile="${temp.home}/${survey-name}-final.tmp"/>
					</else>
				</if>	
             </else>
        </if>
    </target>
    
	    <target name="PoguesPreprocessing">

        <!-- Correct some Pogues XML errors and deal with GoTo. XSL files can be executed in any order -->
        
		<xslt in="${questionnaires.home}/${survey-name}/${in-format}/${survey-name}.xml"
            out="${temp.home}/${survey-name}-final1.tmp" style="${xslt.home}/util/${in-format}/0Pogues-XML-preprocessing-old.xsl"
            classpath="${saxon.jar}" force="true"/>
		<xslt in="${temp.home}/${survey-name}-final1.tmp"
		    out="${temp.home}/${survey-name}-final2.tmp" style="${xslt.home}/util/${in-format}/1Pogues-XML-preprocessing-new.xsl"
            classpath="${saxon.jar}" force="true"/>
		<xslt in="${temp.home}/${survey-name}-final2.tmp"
            out="${temp.home}/${survey-name}-final.tmp" style="${xslt.home}/util/${in-format}/2suppressionGoto.xsl"
            classpath="${saxon.jar}" force="true"/>
    </target>
    
    <!-- This target will call 3 sub targets : dereferencing / cleaning / titling -->
    <target name="DDIPreprocessing">
        <!-- Dereferencing : the input DDI files (ccs, qb...) -->
        <!-- Creates multiple files with a -dereferenced suffix in the temp folder-->
        <antcall target="dereferencing"/>
        <!-- For each created file (one by model), we clean. -->
        <!-- Creating a -cleaned suffixed file -->
        <foreach target="cleaning" param="file" inheritall="true">
            <path>
                <fileset dir="${temp.home}" excludes="*-dereferenced.tmp, null.tmp"/>
            </path>
        </foreach>
        <!-- Then adding titles to the created file below -->
        <!-- Creating a -final suffixed file -->
        <foreach target="titling" param="file" inheritall="true">
            <path>
                <fileset dir="${temp.home}" includes="*-cleaned.tmp"/>
            </path>
        </foreach>
    </target>

    <!-- Dereferencing -->
    <target name="dereferencing">

        <!-- Creates a dereferenced DDI for each model with the already dereferenced files and adding some variables from the VariableScheme to the upcoming result -->
        <xslt in="${questionnaires.home}/${survey-name}/ddi/${survey-name}.xml"
            out="${temp.home}/null.tmp" style="${xslt.home}/util/ddi/dereferencing.xsl"
            classpath="${saxon.jar}" force="true">
            <param name="output-folder" expression="${temp-folder}"/>
        </xslt>

    </target>

    <!-- Cleaning -->
    <!-- Creates a -cleaned suffixed file after applying the cleaning.xsl stylesheet to the input file -->
    <target name="cleaning" description="Cleaning DDI">
        <basename file="${file}" property="file-name" suffix=".tmp"/>
        <xslt in="${temp.home}/${file-name}.tmp" out="${temp.home}/${file-name}-cleaned.tmp"
            style="${xslt.home}/util/ddi/cleaning.xsl" classpath="${saxon.jar}" force="true"/>
    </target>

    <!-- Titling -->
    <!-- Creates a -final suffixed file after applying the titling.xsl stylesheet to the input file -->
    <target name="titling" description="Adding titles">
        <basename file="${file}" property="file-name" suffix=".tmp"/>
        <propertyregex property="output-name" input="${file-name}" regexp="-cleaned" replace=""
            global="true"/>
        <xslt in="${temp.home}/${file-name}.tmp" out="${temp.home}/${output-name}-final.tmp"
            style="${xslt.home}/util/ddi/titling.xsl" classpath="${saxon.jar}" force="true">
            <param name="parameters-file" expression="${survey-folder}/parameters.xml"/>
        </xslt>
    </target>


    <!--************************TARGET : CLEAN*****************************-->
    <!-- Cleaning everything : -->
    <!-- Deleting the content of the temporary folders : temp, test and simpsons -->
    <target name="clean">
        <delete>
            <fileset dir="${root-folder}/target/temp" includes="**/*" erroronmissingdir="false"/>
            <fileset dir="${root-folder}/target/test" includes="**/*" erroronmissingdir="false"/>
            <fileset dir="${root-folder}/target/simpsons" includes="**/*" erroronmissingdir="false"
            />
        </delete>
    </target>

    <!--************************TARGETS WITH NON REGRESSION TEST *****************************-->

    <!-- The full target with non regression tests calculates the difference with the generated out-format Simpsons questionnaire expected -->
    <target name="full-with-test" depends="compile-tests,full">

        <!-- Creating directory target/test/xslt where the difference file will be put -->
        <mkdir dir="${root-folder}/target/test/xslt"/>
        <!-- At the end of the treatment, the difference between the generated and the expected form written in the file target/test/xslt/diff.txt-->
        <foreach target="test" param="file" inheritall="true">
            <path>
                <fileset dir="${temp.home}" includes="*-final.tmp"/>
            </path>
        </foreach>
        <delete dir="${root-folder}/target/classes"/>
    </target>

    <!-- The test target comparing form.out-extension with ${survey-name}-form.out-extension -->
    <target name="test">
        <basename file="${file}" property="file-name" suffix=".tmp"/>
        <propertyregex property="form-name" input="${file-name}" regexp="-final" replace=""
            global="true"/>
        <mkdir dir="${root-folder}/target/test/xslt/${survey-name}/${form-name}"/>
        <!-- Linking the java class used to do this test -->
        <java classname="fr.insee.eno.test.Difference" fork="true">
            <!-- The output file with differences -->
            <arg value="${root-folder}/target/test/xslt/${survey-name}/${form-name}/diff.txt"/>
            <!-- The input generated form to compare -->
            <arg value="${root-folder}/target/${survey-name}/${form-name}/form/form.${out-extension}"/>
            <!-- The expected form -->
            <arg value="${survey-folder}/${out-format}/${form-name}/${survey-name}-form.${out-extension}"/>
            <classpath refid="classpath"/>
        </java>
    </target>

    <!-- Classes compilation for tests -->
    <target name="compile-tests">
        <mkdir dir="${root-folder}/target/classes"/>
        <javac srcdir="${test.java.home}/fr/insee/eno/test" destdir="${root-folder}/target/classes"
            includeantruntime="false">
            <classpath refid="classpath"/>
        </javac>
    </target>


</project>
