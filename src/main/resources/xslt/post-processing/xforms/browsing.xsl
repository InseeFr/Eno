<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl" xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms" xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:eno="http://xml.insee.fr/apps/eno"
    exclude-result-prefixes="eno xd" version="2.0">

    <xsl:import href="../../lib.xsl"/>

    <xd:doc scope="stylesheet">
        <xd:desc>
            <xd:p>This xslt stylesheet is used to add a navigation layer to the xforms generated by the main process.</xd:p>
        </xd:desc>
    </xd:doc>

    <!-- The output file generated will be xml type -->
    <xsl:output method="xml" indent="no" encoding="UTF-8"/>

    <xsl:strip-space elements="*"/>

    <xd:doc>
        <xd:desc>
            <xd:p>The folder containing label resources in different languages.</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:param name="labels-folder"/>

    <xd:doc>
        <xd:desc>
            <xd:p>A variable is created to build a set of label resources in different languages.</xd:p>
            <xd:p>Only the resources in languages already present in the form are charged.</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:variable name="labels-resource">
        <xsl:variable name="languages" as="xs:string*">
            <xsl:for-each select="distinct-values(root()//@xml:lang)">
                <xsl:value-of select="."/>
            </xsl:for-each>
        </xsl:variable>
        <xsl:sequence select="eno:build-labels-resource($labels-folder,$languages)"/>
    </xsl:variable>

    <xd:doc>
        <xd:desc>
            <xd:p>A string corresponding to the path to the CurrentSection.</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:variable name="choice" select="'{instance(''fr-form-instance'')/Util/CurrentSection}'"/>

    <xd:doc>
        <xd:desc>
            <xd:p>The number of modules.</xd:p>
            <xd:p>TODO : update for page splitting ?</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:variable name="number-of-pages" as="xs:integer" select="count(//fr:body//fr:section)"/>

    <xd:doc>
        <xd:desc>list of the loops of pages with addOccurrence</xd:desc>
    </xd:doc>
    <xsl:variable name="loops-of-pages-with-addButton" as="node()">
        <Loops>
            <xsl:for-each select="//fr:body//xf:repeat[descendant::fr:section]">
                <xsl:variable name="loop-name" select="substring-before(@id,'-Container')"/>
                <xsl:if test="following::xf:trigger[@id = concat($loop-name,'-add-occurrence')]">
                    <Loop loop="{$loop-name}" section="{descendant::fr:section[last()]/@name}"/>
                </xsl:if>
            </xsl:for-each>
        </Loops>
    </xsl:variable>
    
    <xd:doc>
        <xd:desc>
            <xd:p>Root template.</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="/">
        <xsl:apply-templates select="xhtml:html">
            <xsl:with-param name="ancestor-loops" as="node()" tunnel="yes">
                <Loops/>
            </xsl:with-param>
        </xsl:apply-templates>
    </xsl:template>

    <xd:doc>
        <xd:desc>
            <xd:p>Default template for every element and every attribute, simply coying to the
                output file.</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="node() | @*" mode="#all" priority="-1">
        <xsl:copy>
            <xsl:apply-templates select="node() | @*" mode="#current"/>
        </xsl:copy>
    </xsl:template>

    <xd:doc>
        <xd:desc>
            <xd:p>Template to add those elements to the main instance.</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="xf:instance[@id='fr-form-instance']/form">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <!-- For the generic first page -->
            <Beginning>
                <GenericBeginningText/>
            </Beginning>
            <xsl:apply-templates select="node()"/>
            <!-- For the generic last page -->
            <End>
                <GenericEndText/>
            </End>
            <!-- Elements that are used for navigation and need to be saved -->
            <Util>
                <CurrentSection>1</CurrentSection>
                <CurrentSectionName/>
                <xsl:for-each select="//fr:body//xf:repeat[descendant::fr:section]">
                    <CurrentLoopElement loop-name="{@id}"/>
                </xsl:for-each>
                <Send>false</Send>
                <DateTime/>
            </Util>
        </xsl:copy>
    </xsl:template>

    <xd:doc>
        <xd:desc>templates to move -addOccurrence at the end of the last page when loop of pages in instance and loop-model</xd:desc>
    </xd:doc>
    <xsl:template match="xf:instance[@id='fr-form-instance']//*[ends-with(name(),'-AddOccurrence') and substring-before(name(),'-AddOccurrence')=$loops-of-pages-with-addButton//Loop/@loop]"/>
    <xsl:template match="xf:instance[@id='fr-form-instance' or @id='fr-form-loop-model']//*[name()=$loops-of-pages-with-addButton//Loop/@section]">
        <xsl:variable name="section-name" select="name()"/>
        <xsl:copy>
            <xsl:apply-templates select="node() | @*" mode="#current"/>
            <xsl:copy-of select="//xf:instance[@id='fr-form-instance']//*[name()=concat($loops-of-pages-with-addButton//Loop[@section=$section-name]/@loop,'-AddOccurrence')]"/>
        </xsl:copy>
    </xsl:template>

    <xd:doc>
        <xd:desc>
            <xd:p>Template to create the corresponding binds of the elements above.</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="xf:bind[@id='fr-form-instance-binds']">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xf:bind id="beginning-bind" name="beginning" ref="Beginning">
                <xf:bind id="generic-beginning-text-bind" name="generic-beginning-text"
                    ref="GenericBeginningText"/>
            </xf:bind>
            <xsl:apply-templates select="node()">
                <xsl:with-param name="bind-in-page" as="xs:boolean" select="false()" tunnel="yes"/>
            </xsl:apply-templates>
            <xf:bind id="end-bind" name="end" ref="End">
                <xf:bind id="generic-end-text-bind" name="generic-end-text" ref="GenericEndText"/>
            </xf:bind>
        </xsl:copy>
    </xsl:template>

    <xd:doc>
        <xd:desc>Replace page loop occurrence with CurrentLoopElement</xd:desc>
    </xd:doc>
    <xsl:template match="xf:bind">
        <xsl:param name="bind-in-page" as="xs:boolean" tunnel="yes"/>
        <xsl:param name="ancestor-loops" as="node()" tunnel="yes"/>

        <xsl:choose>
            <!-- remove the addOccurrence button when out of page -->
            <xsl:when test="not($bind-in-page) and ends-with(@id,'-add-occurrence-bind') and substring-before(@id,'-add-occurrence-bind')=$loops-of-pages-with-addButton//Loop/@loop"/>
            <!-- when enterring into a page -->
            <xsl:when test="not($bind-in-page) and //fr:body//*[@bind=current()/@id]/name()='fr:section'">
                <xsl:variable name="ancestor-loop-relevant">
                    <xsl:for-each select="$ancestor-loops//Loop">
                        <xsl:value-of select="concat('instance(''fr-form-instance'')/Util/CurrentLoopElement[@loop-name=''',@container,'''] != '''' and ancestor::',@loop,'[@occurrence-id = instance(''fr-form-instance'')/Util/CurrentLoopElement[@loop-name=''',@container,''']] and ')"/>
                    </xsl:for-each>
                </xsl:variable>
                <xsl:copy>
                    <xsl:apply-templates select="@*" mode="bind"/>
                    <xsl:choose>
                        <xsl:when test="@relevant">
                            <xsl:attribute name="relevant">
                                <xsl:call-template name="improve-bind-formula">
                                    <xsl:with-param name="attribute" select="concat($ancestor-loop-relevant,@relevant)"/>
                                    <xsl:with-param name="ancestor-loops" as="node()" select="$ancestor-loops"/>
                                </xsl:call-template>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="$ancestor-loop-relevant != ''">
                            <xsl:attribute name="relevant">
                                <xsl:call-template name="improve-bind-formula">
                                    <xsl:with-param name="attribute" select="substring($ancestor-loop-relevant,1,string-length($ancestor-loop-relevant)-5)"/>
                                    <xsl:with-param name="ancestor-loops" as="node()" select="$ancestor-loops"/>
                                </xsl:call-template>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:otherwise/>
                    </xsl:choose>
                    <xsl:apply-templates select="node()">
                        <xsl:with-param name="bind-in-page" select="true()" tunnel="yes"/>
                    </xsl:apply-templates>
                    <xsl:if test="@name = $loops-of-pages-with-addButton//Loop/@section">
                        <xsl:variable name="addoccurrence-bind" as="node()">
                            <xsl:copy-of select="//xf:bind[@id = concat($loops-of-pages-with-addButton//Loop[@section = current()/@name]/@loop,'-add-occurrence-bind')]"/>
                        </xsl:variable>
                        <xf:bind>
                            <xsl:copy-of select="$addoccurrence-bind/@id"/>
                            <xsl:copy-of select="$addoccurrence-bind/@ref"/>
                            <xsl:attribute name="relevant">
                                <xsl:choose>
                                    <xsl:when test="$addoccurrence-bind/@relevant">
                                        <xsl:value-of select="concat('not(ancestor::',$ancestor-loops//Loop[last()]/@loop,'/following-sibling::',$ancestor-loops//Loop[last()]/@loop,') and (',$addoccurrence-bind/@relevant,')')"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:value-of select="concat('not(ancestor::',$ancestor-loops//Loop[last()]/@loop,'/following-sibling::',$ancestor-loops//Loop[last()]/@loop,')')"/>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:attribute>
                        </xf:bind>
                    </xsl:if>
                </xsl:copy>
            </xsl:when>
            <!-- when enterring into a loop of pages -->
            <xsl:when test="not($bind-in-page) and @nodeset">
                <xsl:variable name="container" select="@name"/>
                <xsl:variable name="loop" select="substring-after(@nodeset,concat($container,'/'))"/>
                <xsl:copy>
                    <xsl:apply-templates select="@*" mode="bind"/>
                    <xsl:attribute name="relevant">
                        <xsl:if test="@relevant">
                            <xsl:value-of select="concat(@relevant,' and ')"/>
                        </xsl:if>
                        <xsl:value-of select="concat('@occurrence-id = instance(''fr-form-instance'')/Util/CurrentLoopElement[@loop-name=''',$container,''']')"/>
                    </xsl:attribute>
                    <xsl:apply-templates select="node()">
                        <xsl:with-param name="ancestor-loops" tunnel="yes">
                            <Loops>
                                <xsl:copy-of select="$ancestor-loops//Loop"/>
                                <Loop container="{$container}" loop="{$loop}" inside-page="false()"/>
                            </Loops>
                        </xsl:with-param>
                    </xsl:apply-templates>
                </xsl:copy>
            </xsl:when>
            <xsl:otherwise>
                <xsl:copy>
                    <xsl:apply-templates select="@* | node()"/>
                </xsl:copy>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template match="@*" mode="bind">
        <xsl:param name="ancestor-loops" as="node()" tunnel="yes"/>

        <xsl:attribute name="{name()}">
            <xsl:call-template name="improve-bind-formula">
                <xsl:with-param name="attribute" select="."/>
                <xsl:with-param name="ancestor-loops" as="node()" select="$ancestor-loops"/>
            </xsl:call-template>
        </xsl:attribute>
    </xsl:template>

    <xsl:template name="improve-bind-formula">
        <xsl:param name="attribute"/>
        <xsl:param name="ancestor-loops"/>
        <xsl:param name="is-page-check" select="false()" as="xs:boolean"/>

        <xsl:choose>
            <xsl:when test="$ancestor-loops//Loop">
                <xsl:choose>
                    <xsl:when test="$ancestor-loops//Loop[last()]/@inside-page = 'true()' and $is-page-check">
                        <xsl:variable name="ancestor-label">
                            <xsl:value-of select="'instance(''fr-form-instance'')//'"/>
                            <xsl:for-each select="$ancestor-loops//Loop">
                                <xsl:value-of select="concat(@loop,'[@occurrence-id = current()/ancestor-or-self::',@loop,'/@occurrence-id]//')"/>
                            </xsl:for-each>
                        </xsl:variable>
                        <xsl:variable name="ancestor-label-to-change" select="replace(replace(replace(replace($ancestor-label,'\(','\\('),'\)','\\)'),'\[','\\['),'\]','\\]')"/>
                        <!-- Perhaps there will be a problem with loop in loop inside page where a formula in the child loop uses variables from its parent loop -->
                        <xsl:call-template name="improve-bind-formula">
                            <xsl:with-param name="attribute" select="replace($attribute,$ancestor-label-to-change,'descendant::')"/>
                            <xsl:with-param name="ancestor-loops">
                                <Loops>
                                    <xsl:copy-of select="$ancestor-loops//Loop[position() &lt; last()]"/>
                                </Loops>
                            </xsl:with-param>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:when test="$ancestor-loops//Loop[last()]/@inside-page = 'true()' and not($is-page-check)">
                        <xsl:call-template name="improve-bind-formula">
                            <xsl:with-param name="attribute" select="$attribute"/>
                            <xsl:with-param name="ancestor-loops">
                                <Loops>
                                    <xsl:copy-of select="$ancestor-loops//Loop[position() &lt; last()]"/>
                                </Loops>
                            </xsl:with-param>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:call-template name="improve-bind-formula">
                            <xsl:with-param name="attribute"
                                select="replace(replace($attribute,
                                                        concat('current\(\)/ancestor-or-self::',$ancestor-loops//Loop[last()]/@loop,'/@occurrence-id'),
                                                        concat('instance(''fr-form-instance'')/Util/CurrentLoopElement[@loop-name=''',$ancestor-loops//Loop[last()]/@container,''']')),
                                                concat('current\(\)/ancestor::',$ancestor-loops//Loop[last()]/@loop,'/@occurrence-id'),
                                                concat('instance(''fr-form-instance'')/Util/CurrentLoopElement[@loop-name=''',$ancestor-loops//Loop[last()]/@container,''']'))"/>
                            <xsl:with-param name="ancestor-loops">
                                <Loops>
                                    <xsl:copy-of select="$ancestor-loops//Loop[position() &lt; last()]"/>
                                </Loops>
                            </xsl:with-param>
                        </xsl:call-template>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$attribute"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xd:doc>
        <xd:desc>
            <xd:p>Template to add elements to the resource instance.</xd:p>
            <xd:p>This template is based on the variable defined at the beginning of this stylesheet.</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="resource[ancestor::xf:instance[@id='fr-form-resources']]">
        <xsl:variable name="language" select="@xml:lang"/>
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <Beginning>
                <label>
                    <xsl:value-of select="$labels-resource/Languages/Language[@xml:lang=$language]/Browsing/Beginning"/>
                </label>
            </Beginning>
            <GenericBeginningText>
                <label>
                    <xsl:value-of select="$labels-resource/Languages/Language[@xml:lang=$language]/Browsing/GenericBeginningText"/>
                </label>
            </GenericBeginningText>
            <xsl:apply-templates select="node()"/>
            <xsl:for-each select="$labels-resource/Languages/Language[@xml:lang=$language]/Browsing/*[name() != 'Beginning' and name() != 'GenericBeginningText']">
                <xsl:element name="{name()}">
                    <label>
                        <xsl:value-of select="."/>
                    </label>
                </xsl:element>
            </xsl:for-each>
        </xsl:copy>
    </xsl:template>

    <xd:doc>
        <xd:desc>
            <xd:p>Adding many elements to Xforms model :</xd:p>
            <xd:p>- an 'util' instance' which contains elements used by the form</xd:p>
            <xd:p>- the corresponding binds</xd:p>
            <xd:p>- a save submission</xd:p>
            <xd:p>- a send/validate final submission called 'submit'</xd:p>
            <xd:p>- a 'xforms-ready' action (used when the form is charged)</xd:p>
            <xd:p>- a 'page-change' action (to check if there are errors or warnings on the current page and if the page change is authorized)</xd:p>
            <xd:p>- a 'page-change-done' action (to process the effective page change)</xd:p>
            <xd:p>- a 'submit-form' action (used for the final validation of the form and uses the 'submit' submission)</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="xf:model[@id='fr-form-model']">
        <xsl:copy>
            <xsl:apply-templates select="node() | @*"/>

            <!-- 'util' instance' which contains elements used by the form -->
            <xf:instance id="fr-form-util">
                <Util>
                    <Start/>
                    <Previous/>
                    <Next/>
                    <Send/>
                    <ProgressPercent/>
                    <Progress/>
                    <PageTop/>
                    <Pages>
                        <Beginning/>
                        <!-- TODO : when 1 question by page : exclude external and calculated variables through the page-name mode -->
                        <xsl:apply-templates select="xf:instance[@id='fr-form-instance']/form/*[not(name()='Util') and child::*]" mode="page-name"/>
                        <End/>
                    </Pages>
                    <PreviousNext/>
                    <PageChangeDone/>
                    <ConfirmationMessage/>
                    <FatalError/>
                    <ErrorText/>
                    <WarningText/>
                    <WelcomeBackText/>
                </Util>
            </xf:instance>

            <!-- The corresponding binds -->
            <xf:bind id="fr-form-util-binds" ref="instance('fr-form-util')">
                <!-- The number of pages in the form (not counting the beginning and end pages) -->
                <xf:bind id="start-bind"
                    relevant="instance('fr-form-instance')/Util/CurrentSection='1'" ref="Start"/>
                <!-- The previous button does not appear on first page and after the last page -->
                <xf:bind id="previous-bind"
                    relevant="not(instance('fr-form-instance')/Util/CurrentSection='1' or number(instance('fr-form-instance')/Util/CurrentSection)&gt; {$number-of-pages +2})"
                    ref="Previous"/>
                <!-- The next button does not appear on first and last pages -->
                <xf:bind id="next-bind"
                    relevant="not(instance('fr-form-instance')/Util/CurrentSection='1' or number(instance('fr-form-instance')/Util/CurrentSection)&gt; {$number-of-pages +1})"
                    ref="Next"/>
                <xf:bind id="send-bind" ref="Send"
                    relevant="instance('fr-form-instance')/Util/Send='false'"/>
                <xf:bind id="progress-percent-bind" name="progress-percent" ref="ProgressPercent">
                    <xsl:attribute name="calculate">
                        <xsl:variable name="total-group-pages-count">
                            <xsl:for-each select="//fr:body//xf:repeat[descendant::fr:section]">
                                <xsl:variable name="container" select="@id"/>
                                <xsl:variable name="group-name" select="substring-after(@nodeset,concat($container,'/'))"/>
                                <xsl:variable name="group-condition">
                                    <xsl:if test="//xf:bind[@id=concat($container,'-bind')]/@relevant">
                                        <xsl:value-of select="concat('[',//xf:bind[@id=concat($container,'-bind')]/@relevant,']')"/>
                                    </xsl:if>
                                </xsl:variable>
                                <xsl:variable name="group-pages-number" select="count(descendant::fr:section)"/>
                                <xsl:value-of select="concat(' + (count(instance(''fr-form-instance'')//',$container,'/',$group-name,$group-condition,') -1)*',$group-pages-number)"/>
                            </xsl:for-each>
                        </xsl:variable>
                        <xsl:variable name="denominator" select="concat('(',string($number-of-pages),$total-group-pages-count,')')"/>

                        <xsl:value-of select="'if (number(instance(''fr-form-instance'')/Util/CurrentSection)=1) then ''0'' '"/>
                        <xsl:value-of select="concat('else (if (number(instance(''fr-form-instance'')/Util/CurrentSection)&gt;',$number-of-pages +1,') then ''100''')"/>
                        <!-- numerator : the CurrentSection number corrected by the previous or current repeat -->
                        <xsl:value-of select="' else round((number(instance(''fr-form-instance'')/Util/CurrentSection) - 2'"/>
                        <xsl:for-each select="//fr:body//xf:repeat[descendant::fr:section]">
                            <xsl:variable name="first-page-position" select="count(preceding::fr:section)+1"/>
                            <xsl:variable name="last-page-position" select="$number-of-pages - count(following::fr:section) + 1"/>
                            <xsl:variable name="container" select="@id"/>
                            <xsl:variable name="repeat-name" select="substring-after(@nodeset,concat($container,'/'))"/>
                            <xsl:variable name="repeat-condition">
                                <xsl:if test="//xf:bind[@id=concat($container,'-bind')]/@relevant">
                                    <xsl:value-of select="concat('[',//xf:bind[@id=concat($container,'-bind')]/@relevant,']')"/>
                                </xsl:if>
                            </xsl:variable>
                            <xsl:variable name="repeat-pages-count" select="count(descendant::fr:section)"/>

                            <!-- before the repeat : 0 page -->
                            <xsl:value-of select="concat('+ (if (number(instance(''fr-form-instance'')/Util/CurrentSection) &lt;',$first-page-position,') then 0')"/>
                            <!-- after the repeat : (number of relevant occurrences -1) * number of pages  -->
                            <xsl:value-of select="concat(' else (if (number(instance(''fr-form-instance'')/Util/CurrentSection) &gt;',$last-page-position,')')"/>
                            <xsl:value-of select="concat(' then ((count(instance(''fr-form-instance'')//',$container,'/',$repeat-name,$repeat-condition,') -1)*',$repeat-pages-count,')')"/>
                            <!-- inside the repeat : (number of previous relevant occurrences) * number of pages  -->
                            <xsl:value-of select="' else (count(instance(''fr-form-instance'')'"/>
                            <xsl:for-each select="ancestor-or-self::xf:repeat">
                                <xsl:sort order="descending"/>
                                <xsl:variable name="ancestor-container" select="@id"/>
                                <xsl:variable name="ancestor-group-name" select="substring-after(@nodeset,concat($ancestor-container,'/'))"/>
                                <xsl:value-of select="concat('//',$ancestor-group-name,'[@occurrence-id = instance(''fr-form-instance'')/Util/CurrentLoopElement[@loop-name=''',$ancestor-container,''']]')"/>
                            </xsl:for-each>
                            <xsl:value-of select="concat('/preceding::',$repeat-name,'[parent::',$container,']',$repeat-condition,')*',$repeat-pages-count,')))')"/>
                        </xsl:for-each>
                        <xsl:value-of select="concat(') div ',$denominator,'*100))')"/>
                    </xsl:attribute>
                </xf:bind>
                <xf:bind id="progress-bind" ref="Progress"/>
                <xf:bind id="page-top-bind" ref="PageTop"/>
                <xf:bind id="confirmation-message-bind" ref="ConfirmationMessage" name="confirmation-message"
                    relevant="instance('fr-form-instance')/Util/Send='true'"/>
                <xf:bind id="pages-bind" ref="Pages">
                    <xsl:apply-templates select="//xf:instance[@id='fr-form-instance']/form/*[child::*]" mode="page-bind"/>
                </xf:bind>
            </xf:bind>

            <!--  Save submission -->
            <xsl:comment>You can add a resource attribute for the save submission by processing the result with your own xslt.</xsl:comment>
            <xf:submission id="save" method="post" ref="instance('fr-form-instance')" replace="none" relevant="false">
                <xf:action ev:event="xforms-submit-error">
                    <xxf:show ev:event="DOMActivate" dialog="fatal-error"/>
                </xf:action>
                <xf:action ev:event="xforms-submit-done">
                    <xf:setvalue ref="xxf:instance('fr-persistence-instance')/data-safe-override">true</xf:setvalue>
                </xf:action>
            </xf:submission>

            <!-- Send/Validate submission (final) -->
            <xsl:comment>You can add a resource attribute for the submit submission by processing the result with your own xslt.</xsl:comment>
            <xf:submission id="submit" method="post" ref="instance('fr-form-instance')" replace="none" relevant="false">
                <!-- If somehow it crashes, we register the survey as not submitted and show an error dialog -->
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="instance('fr-form-instance')/Util/Send" value="string('false')"/>
                    <xxf:show ev:event="DOMActivate" dialog="fatal-error"/>
                </xf:action>
                <xf:action ev:event="xforms-submit-done">
                    <!-- This helps to avoid native Orbeon alert messages when wanting to leave the survey even thought the datas are saved. -->
                    <xf:setvalue ref="xxf:instance('fr-persistence-instance')/data-safe-override">true</xf:setvalue>
                </xf:action>
            </xf:submission>

            <!-- Initialization action -->
            <!-- Initialization of all variable text fields -->
            <xf:action ev:event="xforms-ready">
                <xf:setvalue ref="instance('fr-form-instance')/Util/CurrentSectionName" value="instance('fr-form-util')/Pages/*[number(instance('fr-form-instance')/Util/CurrentSection)]/name()"/>
                <!-- Initialization of dynamic arrays and loops -->
                <xsl:for-each select="//xf:repeat">
                    <xsl:variable name="container" select="@id"/>
                    <xsl:variable name="dynamic-array" select="substring-after(@nodeset,concat($container,'/'))"/>
                    <!-- Always initialized through the first one if linked loops -->
                    <xsl:if test="//xf:repeat[tokenize(@nodeset,'/')[last()]=$dynamic-array][not(preceding::xf:repeat[tokenize(@nodeset,'/')[last()]=$dynamic-array])]/@id=$container">
                        <xf:action if="not(instance('fr-form-instance')//{$container}/*)
                            or count(instance('fr-form-instance')//{$container}/{$dynamic-array}) &lt; instance('fr-form-instance')//{$dynamic-array}-Count">
                            <xf:action while="count(instance('fr-form-instance')//{$container}/{$dynamic-array}) &lt; instance('fr-form-instance')//{$dynamic-array}-Count">
                                <xf:insert context="instance('fr-form-instance')//{$container}"
                                    nodeset="instance('fr-form-instance')//{$container}/{$dynamic-array}"
                                    position="after"
                                    origin="instance('fr-form-loop-model')/{$container}/{$dynamic-array}"/>
                                <xsl:choose>
                                    <xsl:when test="ancestor::xf:repeat">
                                        <xf:setvalue ref="instance('fr-form-instance')//{$container}/{$dynamic-array}[last()]/@occurrence-id"
                                            value="concat('{$dynamic-array}-',substring-after(ancestor::*[@occurrence-id][1]/@occurrence-id,'-'),'-',count(instance('fr-form-instance')//{$container}/{$dynamic-array}))"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xf:setvalue ref="instance('fr-form-instance')//{$container}/{$dynamic-array}[last()]/@occurrence-id"
                                            value="concat('{$dynamic-array}-',count(instance('fr-form-instance')//{$container}/{$dynamic-array}))"/>                                        
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xf:action>
                        </xf:action>
                        <xf:action if="count(instance('fr-form-instance')//{$container}/{$dynamic-array}) &gt; instance('fr-form-instance')//{$dynamic-array}-Count">
                            <xf:setvalue ref="instance('fr-form-instance')//{$dynamic-array}-Count"
                                value="count(instance('fr-form-instance')//{$container}/{$dynamic-array})"/>
                        </xf:action>
                        <!-- linked loops -->
                        <xsl:for-each select="//xf:repeat[substring-after(@nodeset,concat(@id,'/')) = $dynamic-array]">
                            <xsl:if test="@id != $container">
                                <xf:action if="not(instance('fr-form-instance')//{@id}/*)
                                    or count(instance('fr-form-instance')//{@id}/{$dynamic-array}) &lt; instance('fr-form-instance')//{$dynamic-array}-Count">
                                    <xf:action while="count(instance('fr-form-instance')//{@id}/{$dynamic-array}) &lt; instance('fr-form-instance')//{$dynamic-array}-Count">
                                        <xf:insert context="instance('fr-form-instance')//{@id}"
                                            nodeset="instance('fr-form-instance')//{@id}/{$dynamic-array}"
                                            position="after"
                                            origin="instance('fr-form-loop-model')/{@id}/{$dynamic-array}"/>
                                        <xf:setvalue ref="instance('fr-form-instance')//{@id}/{$dynamic-array}[last()]/@occurrence-id"
                                            value="instance('fr-form-instance')//{$container}/{$dynamic-array}[position() = count(instance('fr-form-instance')//{@id}/{$dynamic-array})]/@occurrence-id"/>
                                    </xf:action>
                                </xf:action>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:if>
                </xsl:for-each>
                <!-- Going back to the page we left -->
                <xf:toggle case="{$choice}"/>
                <!-- If this isn't submitted yet, and we're not on the first page, a dialog is appearing -->
                <xxf:show
                    if="instance('fr-form-instance')/Util/Send='false' and not(instance('fr-form-instance')/Util/CurrentSection='1')"
                    dialog="welcome-back"/>
            </xf:action>

            <!-- Page changing action -->
            <xf:action ev:event="page-change">
                <!-- Iterating on every field of the current page and doing a DOMFocusOut in order to display potential error messages -->
                <xf:action iterate="instance('fr-form-instance')//*[name()=instance('fr-form-instance')/Util/CurrentSectionName]//*">
                    <xf:dispatch name="DOMFocusOut">
                        <xsl:attribute name="target">
                            <xsl:value-of select="'{concat(context()/name(),''-control'')}'"/>
                        </xsl:attribute>
                    </xf:dispatch>
                </xf:action>
                <xf:action iterate="instance('fr-form-instance')//*[name()=instance('fr-form-instance')/Util/CurrentSectionName]//*[ends-with(name(),'-Container')]/*">
                    <xf:var name="loop-index" value="position()"/>
                    <xf:setindex>
                        <xsl:attribute name="repeat" select="'{context()/parent::*/name()}'"/>
                        <xsl:attribute name="index" select="'$loop-index'"/>
                    </xf:setindex>
                    <xf:action iterate="descendant::*">
                        <xf:dispatch name="DOMFocusOut">
                            <xsl:attribute name="target" select="'{concat(context()/name(),''-control'')}'"/>
                        </xf:dispatch>
                    </xf:action>
                </xf:action>

                <!-- Forcing this to false to notify that the page change isn't done yet. -->
                <xf:setvalue ref="instance('fr-form-util')/PageChangeDone" value="string('false')"/>


                <!-- Every action below is exclusive (works as a switch case)
                        The result of each action can initiate another one, but we don't want that.
                        Therefore, an action will only occur when the PageChangeDone property will be false.
                        Also, each action will end by setting this property to true (which will prevent other actions from triggering-->
                <xf:action
                    if="instance('fr-form-util')/PageChangeDone='false'
                    and not(xxf:valid(instance('fr-form-instance')//*[name()=instance('fr-form-instance')/Util/CurrentSectionName],true(),true()))">
                    <!-- Displaying the dialog window that correspond to an error according to value of PreviousNext-->
                    <xf:action if="instance('fr-form-util')/PreviousNext='-1'">
                        <xxf:show ev:event="DOMActivate" dialog="errorPrevious"/>
                    </xf:action>
                    <xf:action if="instance('fr-form-util')/PreviousNext='1'">
                        <xxf:show ev:event="DOMActivate" dialog="errorNext"/>
                    </xf:action>

                    <!-- And we don't change page -->
                    <xf:setvalue ref="instance('fr-form-util')/PageChangeDone" value="string('true')"/>
                </xf:action>

                <xf:action if="instance('fr-form-util')/PageChangeDone='false'
                           and xxf:valid(instance('fr-form-instance')//*[name()=instance('fr-form-instance')/Util/CurrentSectionName],true(),true())
                           and xxf:evaluate-bind-property(concat('page-',instance('fr-form-instance')/Util/CurrentSectionName,'-bind'),'constraint')=false()">
                    <!-- Displaying the dialog window that correspond to an warning according to value of PreviousNext-->
                    <xf:action if="instance('fr-form-util')/PreviousNext='-1'">
                        <xxf:show ev:event="DOMActivate" dialog="warningPrevious"/>
                    </xf:action>
                    <xf:action if="instance('fr-form-util')/PreviousNext='1'">
                        <xxf:show ev:event="DOMActivate" dialog="warningNext"/>
                    </xf:action>
                    <!-- And we don't change page. The page change can happen at the level of this dialog window -->
                    <xf:setvalue ref="instance('fr-form-util')/PageChangeDone"
                        value="string('true')"/>
                </xf:action>

                <xf:action
                    if="instance('fr-form-util')/PageChangeDone='false'
                    and xxf:valid(instance('fr-form-instance')//*[name()=instance('fr-form-instance')/Util/CurrentSectionName],true(),true())
                    and not(xxf:evaluate-bind-property(concat('page-',instance('fr-form-instance')/Util/CurrentSectionName,'-bind'),'constraint')=false())">
                    <!-- The page change happens -->
                    <xf:dispatch name="page-change-done" targetid="fr-form-model"/>
                </xf:action>

            </xf:action>

            <!-- What happens when the page change is effective -->
            <xf:action ev:event="page-change-done">
                <xf:setvalue ref="instance('fr-form-util')/PageChangeDone" value="string('false')"/>
                <xsl:call-template name="navigation">
                    <xsl:with-param name="direction" select="'1'"/>
                </xsl:call-template>
                <xsl:call-template name="navigation">
                    <xsl:with-param name="direction" select="'-1'"/>
                </xsl:call-template>
                <!-- Saving the time when the saving happened -->
                <xf:setvalue ref="instance('fr-form-instance')/Util/CurrentSection"
                    value="count(instance('fr-form-util')/Pages/*[following-sibling::*[name()=instance('fr-form-instance')/Util/CurrentSectionName]]) +1"/>
                <xf:setvalue ref="instance('fr-form-instance')/Util/DateTime"
                    value="fn:format-dateTime(fn:current-dateTime(),'[D01]-[M01]-[Y0001] à [H01]:[m01]')"/>

                <!-- Switching page -->
                <xf:toggle case="{$choice}"/>
                <!-- Saving -->
                <xf:send submission="save"/>
                <!-- Going at the top of the page -->
                <xf:setfocus control="page-top-control"/>
            </xf:action>

            <!-- What happens when the form is submitted -->
            <xf:action ev:event="submit-form">
                <!-- Writing in the instance that the survey is submitted -->
                <xf:setvalue ref="instance('fr-form-instance')/Util/Send" value="string('true')"/>
                <xf:setvalue ref="instance('fr-form-instance')/Util/DateTime"
                    value="fn:format-dateTime(fn:current-dateTime(),'[D01]-[M01]-[Y0001] à [H01]:[m01]')"/>
                <!-- Dispatching the submission -->
                <xf:send submission="submit"/>
            </xf:action>

        </xsl:copy>
    </xsl:template>

    <xsl:template name="navigation">
        <xsl:param name="direction"/>

        <xsl:variable name="first-in-direction">
            <xsl:choose>
                <xsl:when test="$direction = '1'"><xsl:value-of select="'1'"/></xsl:when>
                <xsl:when test="$direction = '-1'"><xsl:value-of select="'last()'"/></xsl:when>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="next-sibling">
            <xsl:choose>
                <xsl:when test="$direction = '1'"><xsl:value-of select="'following-sibling'"/></xsl:when>
                <xsl:when test="$direction = '-1'"><xsl:value-of select="'preceding-sibling'"/></xsl:when>
            </xsl:choose>
        </xsl:variable>

        <xf:action if="instance('fr-form-util')/PreviousNext='{$direction}'">
            <!-- preparate the following xf:repeat occurrences -->
            <xsl:for-each select="//fr:body//xf:repeat[descendant::fr:section]">
                <xsl:variable name="container" select="@id"/>
                <xsl:variable name="loop-id" select="substring-after(@nodeset,concat($container,'/'))"/>
                <xsl:variable name="repeat-page-limit">
                    <xsl:choose>
                        <xsl:when test="$direction = '1'">
                            <xsl:value-of select="concat(' &lt; ',count(preceding::fr:section) + 2)"/>
                        </xsl:when>
                        <xsl:when test="$direction = '-1'">
                            <xsl:value-of select="concat(' &gt; ',$number-of-pages - count(following::fr:section) + 1)"/>
                        </xsl:when>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="repeat-filter" select="//xf:bind[@id=concat($container,'-bind')]/@relevant"/>
                <xsl:variable name="filter-label">
                    <xsl:if test="$repeat-filter != ''">
                        <xsl:value-of select="concat('[',$repeat-filter,']')"/>
                    </xsl:if>
                </xsl:variable>
                <xsl:variable name="ancestor-address">
                    <xsl:value-of select="'instance(''fr-form-instance'')//'"/>
                    <xsl:for-each select="ancestor::xf:repeat">
                        <xsl:variable name="ancestor-container" select="@id"/>
                        <xsl:variable name="ancestor-loop-id" select="substring-after(@nodeset,concat($ancestor-container,'/'))"/>
                        <xsl:value-of select="concat($ancestor-container,'/',$ancestor-loop-id,'[@occurrence-id = instance(''fr-form-instance'')/Util/CurrentLoopElement[@loop-name=''',$ancestor-container,''']]//')"/>
                    </xsl:for-each>
                </xsl:variable>
                <xf:action if="number(instance('fr-form-instance')/Util/CurrentSection) {$repeat-page-limit}">
                    <xf:setvalue ref="instance('fr-form-instance')/Util/CurrentLoopElement[@loop-name='{$container}']"
                        value="if (instance('fr-form-instance')//{$container}/{$loop-id}{$filter-label}) then ({$ancestor-address}{$container}/{$loop-id}{$filter-label}[{$first-in-direction}]/@occurrence-id) else ''"/>
                    <xf:action if="instance('fr-form-instance')/Util/CurrentLoopElement[@loop-name='{$container}'] != ''">
                        <xf:setindex repeat="{$container}"
                            index="instance('fr-form-instance')//{$container}/{$loop-id}[@occurrence-id = instance('fr-form-instance')/stromae/util/CurrentLoopElement[@loop-name='{$container}']]/count(preceding-sibling::*) +1"/>
                        <xsl:for-each select="descendant::fr:section">
                            <xf:dispatch name="DOMFocusOut" target="{@name}-control"/>
                        </xsl:for-each>
                    </xf:action>
                </xf:action>
            </xsl:for-each>
            <!-- find a next page in the current xf:repeat or a next occurrence's first page in it -->
            <xsl:for-each select="//fr:body//xf:repeat[descendant::fr:section]">
                <xsl:sort order="descending"/>
                <xsl:variable name="container" select="@id"/>
                <xsl:variable name="loop-id" select="substring-after(@nodeset,concat($container,'/'))"/>
                <xsl:variable name="first-page-position" select="count(preceding::fr:section) + 2"/>
                <xsl:variable name="last-page-position" select="$number-of-pages - count(following::fr:section) + 1"/>
                <xsl:variable name="repeat-out-position">
                    <xsl:choose>
                        <xsl:when test="$direction = '1'">
                            <xsl:value-of select="concat('&lt;= ',$last-page-position -1)"/>
                        </xsl:when>
                        <xsl:when test="$direction = '-1'">
                            <xsl:value-of select="concat('&gt;= ',$first-page-position -1)"/>
                        </xsl:when>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="first-in-direction-page-name">
                    <xsl:choose>
                        <xsl:when test="$direction = '1'">
                            <xsl:value-of select="descendant::fr:section[1]/@name"/>
                        </xsl:when>
                        <xsl:when test="$direction = '-1'">
                            <xsl:value-of select="descendant::fr:section[last()]/@name"/>
                        </xsl:when>
                    </xsl:choose>
                </xsl:variable>
                <xsl:variable name="repeat-filter" select="//xf:bind[@id=concat($container,'-bind')]/@relevant"/>
                <xsl:variable name="filter-label">
                    <xsl:if test="$repeat-filter != ''">
                        <xsl:value-of select="concat('[',$repeat-filter,']')"/>
                    </xsl:if>
                </xsl:variable>
                <xsl:variable name="ancestor-address">
                    <xsl:value-of select="'instance(''fr-form-instance'')//'"/>
                    <xsl:for-each select="ancestor::xf:repeat">
                        <xsl:variable name="ancestor-container" select="@id"/>
                        <xsl:variable name="ancestor-loop-id" select="substring-after(@nodeset,concat($ancestor-container,'/'))"/>
                        <xsl:value-of select="concat($ancestor-container,'/',$ancestor-loop-id,'[@occurrence-id = instance(''fr-form-instance'')/Util/CurrentLoopElement[@loop-name=''',$ancestor-container,''']]//')"/>
                    </xsl:for-each>
                </xsl:variable>

                <xf:action if="number(instance('fr-form-instance')/Util/CurrentSection) &gt;= {$first-page-position} and number(instance('fr-form-instance')/Util/CurrentSection) &lt;= {$last-page-position}">
                    <!-- find a next unfiltered page in the current repeat -->
                    <xsl:if test="$first-page-position != $last-page-position">
                        <xf:action if="instance('fr-form-util')/PageChangeDone='false' and instance('fr-form-util')/Pages/*[name()=instance('fr-form-instance')/Util/CurrentSectionName]/{$next-sibling}::*[not(text()='false')][1]/count(preceding-sibling::*) {$repeat-out-position}">
                            <xf:setvalue ref="instance('fr-form-instance')/Util/CurrentSectionName"
                                value="instance('fr-form-util')/Pages/*[name()=instance('fr-form-instance')/Util/CurrentSectionName]/{$next-sibling}::*[not(text()='false')][1]/name()"/>
                            <xf:setvalue ref="instance('fr-form-util')/PageChangeDone" value="string('true')"/>
                        </xf:action>
                    </xsl:if>
                    <!-- find a next occurrence for the current repeat -->
                    <xf:action if="instance('fr-form-util')/PageChangeDone='false'">
                        <xf:setvalue ref="instance('fr-form-instance')/Util/CurrentLoopElement[@loop-name='{$container}']"
                            value="if (instance('fr-form-instance')//{$container}/{$loop-id}[@occurrence-id = instance('fr-form-instance')/Util/CurrentLoopElement[@loop-name='{$container}']][{$next-sibling}::{$loop-id}{$filter-label}]) then ({$ancestor-address}{$container}/{$loop-id}[@occurrence-id = instance('fr-form-instance')/Util/CurrentLoopElement[@loop-name='{$container}']]/{$next-sibling}::{$loop-id}{$filter-label}[1]/@occurrence-id) else ''"/>
                        <xf:action if="instance('fr-form-instance')/Util/CurrentLoopElement[@loop-name='{$container}'] != ''">
                            <xf:setindex repeat="{$container}"
                                index="instance('fr-form-instance')//{$container}/{$loop-id}[@occurrence-id = instance('fr-form-instance')/stromae/util/CurrentLoopElement[@loop-name='{$container}']]/count(preceding-sibling::*) +1"/>
                            <xsl:for-each select="descendant::fr:section">
                                <xf:dispatch name="DOMFocusOut" target="{@name}-control"/>
                            </xsl:for-each>
                        </xf:action>
                        <xf:action if="instance('fr-form-instance')/Util/CurrentLoopElement[@loop-name='{$container}'] != ''">
                            <xsl:for-each select="descendant::xf:repeat[descendant::fr:section]">
                                <xsl:variable name="container" select="@id"/>
                                <xsl:variable name="loop-id" select="substring-after(@nodeset,concat($container,'/'))"/>
                                <xsl:variable name="repeat-filter" select="//xf:bind[@id=concat($container,'-bind')]/@relevant"/>
                                <xsl:variable name="filter-label">
                                    <xsl:if test="$repeat-filter != ''">
                                        <xsl:value-of select="concat('[',$repeat-filter,']')"/>
                                    </xsl:if>
                                </xsl:variable>
                                <xsl:variable name="ancestor-address">
                                    <xsl:value-of select="'instance(''fr-form-instance'')//'"/>
                                    <xsl:for-each select="ancestor::xf:repeat">
                                        <xsl:variable name="ancestor-container" select="@id"/>
                                        <xsl:variable name="ancestor-loop-id" select="substring-after(@nodeset,concat($ancestor-container,'/'))"/>
                                        <xsl:value-of select="concat($ancestor-container,'/',$ancestor-loop-id,'[@occurrence-id = instance(''fr-form-instance'')/Util/CurrentLoopElement[@loop-name=''',$ancestor-container,''']]//')"/>
                                    </xsl:for-each>
                                </xsl:variable>
                                <xf:setvalue ref="instance('fr-form-instance')/Util/CurrentLoopElement[@loop-name='{$container}']"
                                    value="if (instance('fr-form-instance')//{$container}/{$loop-id}{$filter-label}) then ({$ancestor-address}{$container}/{$loop-id}{$filter-label}[1]/@occurrence-id) else ''"/>
                                <xf:action if="instance('fr-form-instance')/Util/CurrentLoopElement[@loop-name='{$container}'] != ''">
                                    <xf:setindex repeat="{$container}"
                                        index="instance('fr-form-instance')//{$container}/{$loop-id}[@occurrence-id = instance('fr-form-instance')/stromae/util/CurrentLoopElement[@loop-name='{$container}']]/count(preceding-sibling::*) +1"/>
                                    <xsl:for-each select="descendant::fr:section">
                                        <xf:dispatch name="DOMFocusOut" target="{@name}-control"/>
                                    </xsl:for-each>
                                </xf:action>
                            </xsl:for-each>
                            <xf:setvalue ref="instance('fr-form-instance')/Util/CurrentSectionName"
                                value="if (instance('fr-form-util')/Pages/{$first-in-direction-page-name}[not(text()='false')]) then '{$first-in-direction-page-name}' else instance('fr-form-util')/Pages/{$first-in-direction-page-name}/{$next-sibling}::*[not(text()='false')][1]/name()"/>
                            <xf:setvalue ref="instance('fr-form-util')/PageChangeDone" value="string('true')"/>
                        </xf:action>
                    </xf:action>
                </xf:action>
            </xsl:for-each>
            <xf:action if="instance('fr-form-util')/PageChangeDone='false'">
                <xf:setvalue ref="instance('fr-form-instance')/Util/CurrentSectionName"
                    value="instance('fr-form-util')/Pages/*[name()=instance('fr-form-instance')/Util/CurrentSectionName]/{$next-sibling}::*[not(text()='false')][1]/name()"/>
                <xf:setvalue ref="instance('fr-form-util')/PageChangeDone" value="string('true')"/>
            </xf:action>
        </xf:action>
    </xsl:template>

    <xd:doc>
        <xd:desc>
            <xd:p>loop of page names</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="*[*/@occurrence-id]" mode="page-name">
        <xsl:apply-templates select="*/*[*]" mode="page-name"/>
    </xsl:template>
    <xsl:template match="*[not(*/@occurrence-id)]" mode="page-name">
        <xsl:element name="{name()}"/>
    </xsl:template>

    <xd:doc>
        <xd:desc>
            <xd:p>loop of pages : bind</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="*[ends-with(name(),'-Container')]" mode="page-bind">
        <xsl:param name="ancestor-loops" as="node()" tunnel="yes"/>
        <xsl:variable name="container" select="name()"/>
        <xsl:variable name="loop-name" select="child::*/name()"/>
        <xsl:apply-templates select="child::*/child::*[child::*]" mode="page-bind">
            <xsl:with-param name="ancestor-loops" tunnel="yes">
                <Loops>
                    <xsl:copy-of select="$ancestor-loops//Loop"/>
                    <Loop container="{$container}" loop="{$loop-name}" inside-page="false()"/>
                </Loops>
            </xsl:with-param>
        </xsl:apply-templates>
    </xsl:template>

    <xd:doc>
        <xd:desc>
            <xd:p>page-bind</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="*[not(ends-with(name(),'-Container'))]" mode="page-bind">
        <xsl:param name="ancestor-loops" as="node()" tunnel="yes"/>

        <xsl:variable name="module-name" select="name()"/>
        <xsl:variable name="relevant" select="//xf:bind[@name=$module-name]/@relevant"/>

        <xf:bind id="page-{name()}-bind" name="{name()}" ref="{name()}">
            <xsl:if test="$relevant != ''">
                <xsl:choose>
                    <xsl:when test="$ancestor-loops//Loop">
                        <xf:calculate>
                            <xsl:attribute name="value">
                                <xsl:call-template name="improve-bind-formula">
                                    <xsl:with-param name="attribute" select="concat('xxf:evaluate(''',replace($relevant,'''',''''''),''')')"/>
                                    <xsl:with-param name="ancestor-loops" as="node()" select="$ancestor-loops"/>
                                </xsl:call-template>
                            </xsl:attribute>
                        </xf:calculate>
                    </xsl:when>
                    <xsl:otherwise>
                        <xf:calculate value="xxf:evaluate-bind-property('{name()}-bind','relevant')"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:if>
            <!-- Creating a constraint for each warning-level constraint -->
            <xsl:apply-templates select="//xf:bind[@name=$module-name]/*" mode="page-check">
                <xsl:with-param name="level" select="'warning'" tunnel="yes"/>
                <xsl:with-param name="constraint-begin" select="''" as="xs:string" tunnel="yes"/>
                <xsl:with-param name="constraint-end" select="''" as="xs:string" tunnel="yes"/>
            </xsl:apply-templates>
        </xf:bind>
    </xsl:template>

    <xd:doc>
        <xd:desc>page-check : nothing by default</xd:desc>
    </xd:doc>
    <xsl:template match="*[not(@relevant) and not(@nodeset)]" mode="page-check">
        <xsl:apply-templates select="*" mode="page-check"/>
    </xsl:template>

    <xd:doc>
        <xd:desc>page-check : constraint added : must be true so that there is no pop-up</xd:desc>
    </xd:doc>
    <xsl:template match="xf:constraint" mode="page-check" priority="1">
        <xsl:param name="level" tunnel="yes"/>
        <xsl:param name="constraint-begin" as="xs:string" tunnel="yes"/>
        <xsl:param name="constraint-end" as="xs:string" tunnel="yes"/>
        <xsl:param name="ancestor-loops" as="node()" tunnel="yes"/>

        <xsl:if test="@level=$level">
            <xf:constraint>
                <xsl:attribute name="value">
                    <xsl:call-template name="improve-bind-formula">
                        <xsl:with-param name="attribute" select="concat($constraint-begin,'(',replace(@value,'ancestor::','ancestor-or-self::'),')',$constraint-end)"/>
                        <xsl:with-param name="ancestor-loops" as="node()" select="$ancestor-loops"/>
                        <xsl:with-param name="is-page-check" select="true()" as="xs:boolean"/>
                    </xsl:call-template>
                </xsl:attribute>
            </xf:constraint>
        </xsl:if>
    </xsl:template>

    <xd:doc>
        <xd:desc>page-check : relevant ancestor of constraint added : must be not relevant or the constraint inside must be true</xd:desc>
    </xd:doc>
    <xsl:template match="xf:bind[@relevant and not(@nodeset)]" mode="page-check">
        <xsl:param name="constraint-begin" as="xs:string" tunnel="yes"/>
        <xsl:param name="constraint-end" as="xs:string" tunnel="yes"/>

        <xsl:apply-templates select="*" mode="page-check">
            <xsl:with-param name="constraint-begin" select="concat($constraint-begin,'(not(',replace(@relevant,'ancestor::','ancestor-or-self::'),') or ')" as="xs:string" tunnel="yes"/>
            <xsl:with-param name="constraint-end" select="concat(')',$constraint-end)" as="xs:string" tunnel="yes"/>
        </xsl:apply-templates>
    </xsl:template>

    <xd:doc>
        <xd:desc>page-check : relevant nodeset of constraint added : all instances must be true, so no instance can be false</xd:desc>
    </xd:doc>
    <xsl:template match="xf:bind[@nodeset]" mode="page-check">
        <xsl:param name="level" tunnel="yes"/>
        <xsl:param name="ancestor-loops" as="node()" tunnel="yes"/>
        <xsl:param name="constraint-begin" as="xs:string" tunnel="yes"/>
        <xsl:param name="constraint-end" as="xs:string" tunnel="yes"/>

        <xsl:variable name="container" select="@nodeset"/>
        <xsl:variable name="loop-name" select="substring-after($container,'-Container/')"/>
        <xsl:apply-templates select="*" mode="page-check">
            <xsl:with-param name="constraint-begin" as="xs:string" tunnel="yes">
                <xsl:choose>
                    <xsl:when test="$ancestor-loops//Loop">
                        <xsl:value-of select="concat($constraint-begin,'not(descendant::',$loop-name,'[not(')"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="concat($constraint-begin,'not(instance(''fr-form-instance'')//',$loop-name,'[not(')"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:with-param>
            <xsl:with-param name="constraint-end" as="xs:string" tunnel="yes" select="concat(')])',$constraint-end)"/>
            <xsl:with-param name="ancestor-loops" tunnel="yes">
                <Loops>
                    <xsl:copy-of select="$ancestor-loops//Loop"/>
                    <Loop container="{$container}" loop="{$loop-name}" inside-page="true()"/>
                </Loops>
            </xsl:with-param>
        </xsl:apply-templates>
    </xsl:template>

    <xsl:template match="xf:var[@value='position()' and parent::xf:repeat/descendant::fr:section]">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <xsl:attribute name="value">
                <xsl:value-of select="'instance(''fr-form-instance'')'"/>
                <xsl:for-each select="ancestor::xf:repeat">
                    <xsl:sort order="descending"/>
                    <xsl:variable name="ancestor-container" select="@id"/>
                    <xsl:variable name="ancestor-group-name" select="substring-after(@nodeset,concat($ancestor-container,'/'))"/>
                    <xsl:value-of select="concat('//',$ancestor-group-name,'[@occurrence-id = instance(''fr-form-instance'')/Util/CurrentLoopElement[@loop-name=''',$ancestor-container,''']]')"/>
                </xsl:for-each>
                <xsl:value-of select="'/count(preceding-sibling::*)+1'"/>
            </xsl:attribute>
            <xsl:apply-templates select="node()"/>
        </xsl:copy>
    </xsl:template>

    <xd:doc>
        <xd:desc>
            <xd:p>Adding buttons to the questionnaire to make a change of page.</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="fr:view">
        <xsl:copy>
            <xsl:apply-templates select="node() | @*"/>
            <fr:buttons>
                <xf:trigger id="start" bind="start-bind">
                    <xf:label ref="$form-resources/Start/label"/>
                    <xf:action ev:event="DOMActivate">
                        <xf:setvalue ref="instance('fr-form-util')/PreviousNext" value="1"/>
                        <xf:dispatch name="page-change" targetid="fr-form-model"/>
                    </xf:action>
                </xf:trigger>
                <xf:trigger id="previous" bind="previous-bind">
                    <xf:label ref="$form-resources/Previous/label"/>
                    <xf:action ev:event="DOMActivate">
                        <xf:setvalue ref="instance('fr-form-util')/PreviousNext" value="-1"/>
                        <xf:dispatch name="page-change" targetid="fr-form-model"/>
                    </xf:action>
                </xf:trigger>
                <xf:trigger id="next" bind="next-bind">
                    <xf:label ref="$form-resources/Next/label"/>
                    <xf:action ev:event="DOMActivate">
                        <xf:setvalue ref="instance('fr-form-util')/PreviousNext" value="1"/>
                        <xf:dispatch name="page-change" targetid="fr-form-model"/>
                    </xf:action>
                </xf:trigger>
            </fr:buttons>
        </xsl:copy>
    </xsl:template>

    <xd:doc>
        <xd:desc>
            <xd:p>Adding some elements to the body and modifying some others :</xd:p>
            <xd:p>- a progress bar</xd:p>
            <xd:p>- wrapping the differents modules into a switch/case to display one module by page</xd:p>
            <xd:p>- adding different dialogs</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="fr:body">
        <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <!-- This helps being placed at the top of the page when changing page -->
            <xf:input id="page-top-control" bind="page-top-bind" class="page-top"/>
            <!-- Representing the progress-bar element on every page -->
            <xhtml:div class="progress-bar-container">
                <xhtml:span class="right">
                    <xf:output id="progress-control" bind="progress-bind">
                        <xf:label ref="$form-resources/Progress/label">
                            <xsl:attribute name="mediatype">text/html</xsl:attribute>
                        </xf:label>
                    </xf:output>
                    <!-- This element measures the survey's progress -->
                    <xhtml:progress id="progress" max="100">
                        <xsl:attribute name="value" select="'{instance(''fr-form-util'')/ProgressPercent}'"/>
                    </xhtml:progress>
                    <xf:output id="progress-percent" ref="instance('fr-form-util')/ProgressPercent"/> %</xhtml:span>
            </xhtml:div>

            <xsl:apply-templates select="*[not(name()='fr:section') and not(name()='xf:repeat')]"/>
            <!-- Using a switch in order to display one module by page -->
            <xf:switch id="section-body">
                <xf:case id="1">
                    <fr:section id="beginning-control" bind="beginning-bind" name="beginning">
                        <xf:label ref="$form-resources/Beginning/label"/>
                        <xhtml:div class="center">
                            <xf:output id="generic-beginning-text-control" bind="generic-beginning-text-bind">
                                <xf:label ref="$form-resources/GenericBeginningText/label" mediatype="text/html"/>
                            </xf:output>
                        </xhtml:div>
                    </fr:section>
                </xf:case>
                <xsl:apply-templates select="*[name()='fr:section' or name()='xf:repeat']"/>
                <xf:case id="{string(number($number-of-pages)+2)}">
                    <fr:section id="end-control" bind="end-bind" name="end">
                        <xf:label ref="$form-resources/End/label"/>
                        <xhtml:div class="center">
                            <xf:output id="generic-end-text-control" bind="generic-end-text-bind">
                                <xf:label ref="$form-resources/GenericEndText/label" mediatype="text/html"/>
                            </xf:output>
                            <!-- Button to submit the form -->
                            <xf:trigger id="send" bind="send-bind">
                                <xf:label ref="$form-resources/Send/label"/>
                                <xf:action ev:event="DOMActivate">
                                    <xf:dispatch name="submit-form" targetid="fr-form-model"/>
                                </xf:action>
                            </xf:trigger>
                            <!-- When submitted, this message appears -->
                            <xf:output id="confirmation-message" bind="confirmation-message-bind">
                                <xf:label ref="concat($form-resources/ConfirmationMessage/label,' ',instance('fr-form-instance')/Util/DateTime)"/>
                            </xf:output>
                        </xhtml:div>
                    </fr:section>
                </xf:case>
            </xf:switch>

            <!-- The dialog displayed if there is an error on page change -->
            <xxf:dialog id="errorPrevious" draggable="false" close="false">
                <xf:label ref="$form-resources/Error/label"/>
                <xf:output ref="instance('fr-form-util')/ErrorText">
                    <xf:label ref="$form-resources/ErrorTextPrevious/label" mediatype="text/html"/>
                </xf:output>
                <xf:trigger id="correct-error-previous">
                    <xf:label ref="$form-resources/Correct/label"/>
                    <xxf:hide ev:event="DOMActivate" dialog="errorPrevious"/>
                </xf:trigger>
            </xxf:dialog>
            <xxf:dialog id="errorNext" draggable="false" close="false">
                <xf:label ref="$form-resources/Error/label"/>
                <xf:output ref="instance('fr-form-util')/ErrorText">
                    <xf:label ref="$form-resources/ErrorTextNext/label" mediatype="text/html"/>
                </xf:output>
                <xf:trigger id="correct-error-next">
                    <xf:label ref="$form-resources/Correct/label"/>
                    <xxf:hide ev:event="DOMActivate" dialog="errorNext"/>
                </xf:trigger>
            </xxf:dialog>
            <!-- The dialog displayed if there is a warning on page change -->
            <xxf:dialog id="warningPrevious" close="false" draggable="false">
                <xf:label ref="$form-resources/Warning/label"/>
                <xf:output ref="instance('fr-form-util')/WarningText">
                    <xf:label ref="$form-resources/WarningTextPrevious/label" mediatype="text/html"/>
                </xf:output>
                <xf:trigger id="correct-warning-previous">
                    <xf:label ref="$form-resources/Correct/label"/>
                    <xxf:hide ev:event="DOMActivate" dialog="warningPrevious"/>
                </xf:trigger>
                <xf:trigger id="warning-previous">
                    <xf:label ref="$form-resources/GoBackWarning/label"/>
                    <xxf:hide ev:event="DOMActivate" dialog="warningPrevious"/>
                    <xf:action ev:event="DOMActivate">
                        <xf:dispatch name="page-change-done" targetid="fr-form-model"/>
                    </xf:action>
                </xf:trigger>
            </xxf:dialog>
            <xxf:dialog id="warningNext" close="false" draggable="false">
                <xf:label ref="$form-resources/Warning/label"/>
                <xf:output ref="instance('fr-form-util')/WarningText">
                    <xf:label ref="$form-resources/WarningTextNext/label" mediatype="text/html"/>
                </xf:output>
                <xf:trigger id="correct-warning-next">
                    <xf:label ref="$form-resources/Correct/label"/>
                    <xxf:hide ev:event="DOMActivate" dialog="warningNext"/>
                </xf:trigger>
                <xf:trigger id="warning-continue">
                    <xf:label ref="$form-resources/Continue/label"/>
                    <xxf:hide ev:event="DOMActivate" dialog="warningNext"/>
                    <xf:action ev:event="DOMActivate">
                        <xf:dispatch name="page-change-done" targetid="fr-form-model"/>
                    </xf:action>
                </xf:trigger>
            </xxf:dialog>
            <!-- The dialog displayed when the form is charged, for a user who already started filling the form without submitting it -->
            <xxf:dialog id="welcome-back" close="false" draggable="false">
                <xf:label ref="$form-resources/WelcomeBack/label"/>
                <xf:output ref="instance('fr-form-util')/WelcomeBackText">
                    <xf:label ref="$form-resources/WelcomeBackText/label" mediatype="text/html"/>
                </xf:output>
                <xf:trigger id="go-back">
                    <xf:label ref="$form-resources/GoBack/label"/>
                    <xxf:hide ev:event="DOMActivate" dialog="welcome-back"/>
                </xf:trigger>
                <xf:trigger id="go-to-first-page">
                    <xf:label ref="$form-resources/GoToFirstPage/label"/>
                    <xf:action ev:event="DOMActivate">
                        <xxf:hide dialog="welcome-back"/>
                        <xf:setvalue ref="instance('fr-form-instance')/Util/CurrentSection" value="'1'"/>
                        <xf:setvalue ref="instance('fr-form-instance')/Util/CurrentSectionName" value="instance('fr-form-util')/Pages/*[1]/name()"/>
                        <xf:toggle case="{$choice}"/>
                    </xf:action>
                </xf:trigger>
            </xxf:dialog>
            <!-- The dialog displayed when there was an error when saving or submitting the form -->
            <xxf:dialog id="fatal-error" close="true" draggable="false">
                <xf:label ref="$form-resources/Error/label"/>
                <xf:output ref="instance('fr-form-util')/FatalError">
                    <xf:label ref="$form-resources/FatalError/label"/>
                </xf:output>
            </xxf:dialog>
        </xsl:copy>
    </xsl:template>

    <xd:doc>
        <xd:desc>
            <xd:p>a loop of pages is just a filter on one occurrence of the loop, with a complex navigation mode</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="xf:repeat[ancestor::fr:body and descendant::fr:section]">
        <xsl:param name="ancestor-loops" as="node()" tunnel="yes"/>

        <xsl:apply-templates select="node()">
            <xsl:with-param name="ancestor-loops" tunnel="yes">
                <Loops>
                    <xsl:copy-of select="$ancestor-loops//Loop"/>
                    <Loop container="{@id}" loop="{substring-after(@nodeset,concat(@id,'/'))}" inside-page="false()"/>
                </Loops>
            </xsl:with-param>
        </xsl:apply-templates>
    </xsl:template>

    <xd:doc>
        <xd:desc>
            <xd:p>Template to wrap each existing module in a xf:case.</xd:p>
        </xd:desc>
    </xd:doc>
    <xsl:template match="fr:section">
        <xsl:param name="ancestor-loops" as="node()" tunnel="yes"/>
        <xsl:variable name="section-name" select="@name"/>
        <xf:case id="{count(preceding::fr:section)+2}">
            <xsl:for-each select="$ancestor-loops//Loop">
                <xsl:value-of select="concat('&lt;xf:repeat
                    id=&quot;',@container,'-',$section-name,'&quot;
                    bind=&quot;',@container,'-bind&quot;
                    nodeset=&quot;',@container,'/',@loop,'&quot;
                    relevant=&quot;@occurrence-id = instance(''fr-form-instance'')/Util/CurrentLoopElement[@loop-name=''',@container,''']&quot;&gt;')"
                    disable-output-escaping="yes"/>
            </xsl:for-each>
            <xsl:copy>
                <xsl:apply-templates select="node() | @*"/>
                <xsl:if test="@name = $loops-of-pages-with-addButton//Loop/@section">
                    <xsl:copy-of select="//xf:trigger[@id = concat($loops-of-pages-with-addButton//Loop[@section = current()/@name]/@loop,'-add-occurrence')]"/>
                </xsl:if>
            </xsl:copy>
            <xsl:for-each select="$ancestor-loops//Loop">
                <xsl:value-of select="'&lt;/xf:repeat&gt;'" disable-output-escaping="yes"/>
            </xsl:for-each>
        </xf:case>
    </xsl:template>
    
    <xsl:template match="xf:trigger[ends-with(@id,'-add-occurrence') and substring-before(@id,'-add-occurrence')=$loops-of-pages-with-addButton//Loop/@loop]"/>

    <xsl:template match="xf:label/@ref | xf:alert/@ref | xf:action/@* |xf:setvalue/@*">
        <xsl:param name="ancestor-loops" as="node()" tunnel="yes"/>

        <xsl:attribute name="{name()}">
            <xsl:call-template name="improve-bind-formula">
                <xsl:with-param name="attribute" select="."/>
                <xsl:with-param name="ancestor-loops" select="$ancestor-loops"/>
            </xsl:call-template>
        </xsl:attribute>
    </xsl:template>
</xsl:stylesheet>
